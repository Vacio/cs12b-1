head	1.4;
access;
symbols;
locks;
comment	@# @;


1.4
date	2012.01.06.02.35.59;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.01.06.02.35.42;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.01.05.23.13.14;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.03.24.01.56.53;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@// $Id: jfmt.java,v 1.3 2012-01-05 18:35:42-08 - - $
//
// Starter code for the jfmt utility.  This program is similar
// to the example code jcat.java, which iterates over all of its
// input files, except that this program shows how to use
// String.split to extract non-whitespace sequences of characters
// from each line.
//

import java.io.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import static java.lang.System.*;

class jfmt {
   // Static variables keeping the general status of the program.
   public static final String JAR_NAME = get_jarname ();
   public static final int EXIT_SUCCESS = 0;
   public static final int EXIT_FAILURE = 1;
   public static int exit_status = EXIT_SUCCESS;

   // A basename is the final component of a pathname.
   // If a java program is run from a jar, the classpath is the
   // pathname of the jar.
   static String get_jarname () {
      String jarpath = getProperty ("java.class.path");
      int lastslash = jarpath.lastIndexOf ('/');
      if (lastslash < 0) return jarpath;
      return jarpath.substring (lastslash + 1);
   }

   // Formats a single file.
   static void format (Scanner infile) {
      // Read each line from the opened file, one after the other.
      // Stop the loop at end of file.
      for (int linenr = 1; infile.hasNextLine (); ++linenr) {
         String line = infile.nextLine ();
         out.printf ("line %3d: [%s]%n", linenr, line);

         // Create a LinkedList of Strings.
         List<String> words = new LinkedList<String> ();

         // Split the line into words around white space and iterate
         // over the words.
         for (String word: line.split ("\\s+")) {

            // Skip an empty word if such is found.
            if (word.length () == 0) continue;
            out.printf ("...[%s]%n", word);
            // Append the word to the end of the linked list.
            words.add (word);

         }
         out.printf ("list:");

         // Use iterator syntax to print out all of the words.
         for (String word: words) out.printf (" %s", word);
         out.printf ("%n");
      }
   }

   // Main function scans arguments and opens/closes files.
   public static void main (String[] args) {
      if (args.length == 0) {
         // There are no filenames given on the command line.
         out.printf ("FILE: -%n");
         format (new Scanner (in));
      }else {
         // Iterate over each filename given on the command line.
         for (int argix = 0; argix < args.length; ++argix) {
            String filename = args[argix];
            if (filename.equals ("-")) {
               // Treat a filename of "-" to mean System.in.
               out.printf ("FILE: -%n");
               format (new Scanner (in));
            }else {
               // Open the file and read it, or error out.
               try {
                  Scanner infile = new Scanner (new File (filename));
                  out.printf ("FILE: %s%n", filename);
                  format (infile);
                  infile.close ();
               }catch (IOException error) {
                  exit_status = EXIT_FAILURE;
                  err.printf ("%s: %s%n", JAR_NAME,
                              error.getMessage ());
               }
            }
         }
      }
      exit (exit_status);
   }

}
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.2 2012-01-05 15:13:14-08 - - $
d26 1
a26 1
   static void get_jarname () {
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.1 2011-03-23 18:56:53-07 - - $
d17 5
d23 11
d40 1
d43 1
d47 1
d53 1
d56 1
d63 1
d85 3
a87 1
                  auxlib.warn (error.getMessage ());
d92 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: jfmt.java,v 1.1 2010-12-13 17:26:24-08 - - $
d19 2
d24 1
d26 2
d29 1
d32 1
d36 1
d43 2
a44 1
      if (args.length < 1) {
d48 1
d52 1
d56 1
@
